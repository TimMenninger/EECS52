MODULE Jukebox

TITLE 'Jukebox CPLD'


" Jukebox Interface  DEVICE  'ISPLSI1016'


" Description:
"

" Revision History:
" 02/12/16      Created with functionality for 4x20 Display, IDE interface and
"                   digital potentiometer.
" 03/06/16      Added functionality for DRAM refresh, read and write
" 09/23/16      Split into ISPLSI1016 (IDE, DRAM, interrupts) and GAL16V8
"               (Display and Digital pot)



" Pins

Clock  pin    1;                "input   24 MHz clock
iSRDY  pin    2;                "input   SRDY from ISPLSI1016
!PCS6  pin    3;                "input   PCS6 (active low from 80188, for pot)
!PCS5  pin    4;                "input   PCS5 (active low from 80188, for display)
RESET  pin    5;                "input   Reset (active high from 80C188)
DTR    pin    6;                "input   DTR (from 80C188)
A0     pin    7;                "input   Address bit 0, used in display
"      pin    8                  input   unused (I7)
"      pin    9                  input   unused (I8)
"GND   pin   10;                 supply  power ground
"OE    pin   11;                 input   output enable to GAL16v8
"      pin   12;                 unused  (I/O 8)
SRDY   pin   13  ISTYPE 'com';  "output  synchronous ready to 80C188
DISP   pin   14  ISTYPE 'com';  "output  Register select to display
DDIR   pin   15  ISTYPE 'com';  "output  Data direction for display
DRW    pin   16  ISTYPE 'com';  "output  R/W signal to display
DISPE  pin   17  ISTYPE 'com';  "output  Enable signal to display
!POT   pin   18  ISTYPE 'com';  "output  Pot chip select
POTUD  pin   19  ISTYPE 'com';  "output  Serial clock to MP3 decoder, U/D to digital pot
"VCC   pin   20                  supply  power Vcc

" General registers
RDWR   pin       ISTYPE 'reg';  "keeps track of whether we are reading (0) or writing (1)



"################################################
"#
"# Display, Digital Pot
"#
"#

St0    pin       ISTYPE 'reg';  "output  state bit 0
St1    pin       ISTYPE 'reg';  "output  state bit 1
St2    pin       ISTYPE 'reg';  "output  state bit 2
St3    pin       ISTYPE 'reg';  "output  state bit 3
St4    pin       ISTYPE 'reg';  "output  state bit 4

C0     pin       ISTYPE 'reg';  "counter bit
C1     pin       ISTYPE 'reg';  "counter bit
C2     pin       ISTYPE 'reg';  "counter bit
C3     pin       ISTYPE 'reg';  "counter bit
C4     pin       ISTYPE 'reg';  "counter bit
C5     pin       ISTYPE 'reg';  "counter bit



" Display, IDE, Digital Pot, MP3

StateBits  =  [ St4, St3, St2, St1, St0 ]; " state bits
                                                " state assignments
" Start state
Idle       =  [   0,   0,   0,   0,   0 ]; " idle state (waiting for a cycle to start)

" Display states
DispSt     =  [   1,   0,   0,   0,   0 ]; " start of display access cycle
DispWt1    =  [   1,   0,   0,   0,   1 ]; " wait state 1 (so E cycle is 460 ns long)
DispWt2    =  [   1,   0,   0,   1,   1 ]; " wait state 2
DispWt3    =  [   1,   0,   0,   1,   0 ]; " wait state 3
DispWt4    =  [   1,   0,   1,   1,   0 ]; " wait state 4
DispWt5    =  [   1,   0,   1,   0,   0 ]; " wait state 5
DispWt6    =  [   1,   1,   1,   0,   0 ]; " wait state 6
DispWt7    =  [   1,   1,   0,   0,   0 ]; " wait state 7
DispWt8    =  [   1,   1,   0,   0,   1 ]; " wait state 8
DispRd     =  [   1,   1,   0,   1,   1 ]; " extra wait state when reading
DispStop   =  [   1,   1,   0,   1,   0 ]; " stops write cycle, CPU responsible for 1200 ns wait

" Digital potentiometer states
PotLoop    =  [   0,   0,   1,   0,   0 ]; " enables digital potentiometer/waits to do next pulse


" Counter
Counter    =  [ C5, C4, C3, C2, C1, C0 ];  " counts state iterations for digital potentiometer


EQUATIONS

" Output enables - enable the used outputs (registered outputs enabled by OE pin)
SRDY.OE  = 1;
" Display
DISP.OE  = 1;
DDIR.OE  = 1;
DRW.OE   = 1;
DISPE.OE = 1;
" Digital pot
POT.OE   = 1;
POTUD.OE = 1;


" clocks for the registered outputs
StateBits.CLK  =  Clock;        " use the global clock pin
Counter.CLK    =  Clock;







"#############################################################################
"#
"# Everything Else State Machine:
"#      Display
"#      Digital Pot
"#
"#


STATE_DIAGRAM  StateBits        " a Mealy state machine


STATE  Idle:                " Wait idly with nothing enabled

    " Turn off all chip selects
    " Display
    DISP  = 0;              " Disable display RS
    DDIR  = 0;              " Direction is irrelevant
    DRW   = 0;              " Read/Write is irrelevant
    DISPE = 0;              " Disable display

    SRDY = iSRDY;           " SRDY depends on signal from LSI1016

         IF (RESET)         THEN Idle      WITH { POT = 0; POTUD = 0 }    " stay here
    ELSE IF (!iSRDY)        THEN Idle      WITH { POT = 0; POTUD = 0 }    " stay here
    ELSE IF (PCS5)          THEN DispSt    WITH { POT = 0; POTUD = 0 }    " write/read to display
    ELSE IF (PCS6)          THEN PotLoop   WITH { POT = 0; POTUD = !A0 }  " digital pot
    ELSE                         Idle      WITH { POT = 0; POTUD = 0 }   " stay here



" Following states correspond to writing to display

STATE DispSt:               " Begin display write cycle

    " Display
    DISP  = DTR & !A0;      " !A0 implies its R/W, so check DTR
    DRW   = !DTR & !A0;     " !A0 implies its R/W (0 otherwise), RW inverse of DTR
    DDIR  = DTR;            " Data to/from display depends on action
    DISPE = 0;              " Enable must be strictly after RW and RS
    " Digital pot
    POT   = 0;              " Disable potentiometer
    POTUD = 0;              " Increment/decrement irrelevant

    SRDY = 0;               " SRDY not ready while displaying

         IF (RESET)         THEN Idle       "Reset, stop displaying.
    ELSE                         DispWt1;   "Next state enables data latch


STATE DispWt1:              " Begin waiting while display sets up

    " Display
    DISP  = DTR & !A0;      " !A0 implies its R/W, so check DTR
    DRW   = !DTR & !A0;     " !A0 implies its R/W (0 otherwise), RW inverse of DTR
    DDIR  = DTR;            " Data to/from display depends on action
    DISPE = 1;              " Enable display data
    " Digital pot
    POT   = 0;              " Disable potentiometer
    POTUD = 0;              " Increment/decrement irrelevant

    SRDY = 0;               " SRDY not ready while displaying

         IF (RESET)         THEN Idle       "Reset, stop displaying.
    ELSE                         DispWt2;   "Continue waiting


STATE DispWt2:              " Continue waiting while display sets up

    " Display
    DISP  = DTR & !A0;      " !A0 implies its R/W, so check DTR
    DRW   = !DTR & !A0;     " !A0 implies its R/W (0 otherwise), RW inverse of DTR
    DDIR  = DTR;            " Data to/from display depends on action
    DISPE = 1;              " Enable display data
    " Digital pot
    POT   = 0;              " Disable potentiometer
    POTUD = 0;              " Increment/decrement irrelevant

    SRDY = 0;               " SRDY not ready while displaying

         IF (RESET)         THEN Idle       "Reset, stop displaying.
    ELSE                         DispWt3;   "Continue waiting


STATE DispWt3:              " Continue waiting while display sets up

    " Display
    DISP  = DTR & !A0;      " !A0 implies its R/W, so check DTR
    DRW   = !DTR & !A0;     " !A0 implies its R/W (0 otherwise), RW inverse of DTR
    DDIR  = DTR;            " Data to/from display depends on action
    DISPE = 1;              " Enable display data
    " Digital pot
    POT   = 0;              " Disable potentiometer
    POTUD = 0;              " Increment/decrement irrelevant

    SRDY = 0;               " SRDY not ready while displaying

         IF (RESET)         THEN Idle       "Reset, stop displaying.
    ELSE                         DispWt4;   "Continue waiting


STATE DispWt4:              " Continue waiting while display sets up

    " Display
    DISP  = DTR & !A0;      " !A0 implies its R/W, so check DTR
    DRW   = !DTR & !A0;     " !A0 implies its R/W (0 otherwise), RW inverse of DTR
    DDIR  = DTR;            " Data to/from display depends on action
    DISPE = 1;              " Enable display data
    " Digital pot
    POT   = 0;              " Disable potentiometer
    POTUD = 0;              " Increment/decrement irrelevant

    SRDY = 0;               " SRDY not ready while displaying

         IF (RESET)         THEN Idle       "Reset, stop displaying.
    ELSE                         DispWt5;   "Continue waiting


STATE DispWt5:              " Continue waiting while display sets up

    " Display
    DISP  = DTR & !A0;      " !A0 implies its R/W, so check DTR
    DRW   = !DTR & !A0;     " !A0 implies its R/W (0 otherwise), RW inverse of DTR
    DDIR  = DTR;            " Data to/from display depends on action
    DISPE = 1;              " Enable display data
    " Digital pot
    POT   = 0;              " Disable potentiometer
    POTUD = 0;              " Increment/decrement irrelevant

    SRDY = 0;               " SRDY not ready while displaying

         IF (RESET)         THEN Idle       "Reset, stop displaying.
    ELSE                         DispWt6;   "Continue waiting


STATE DispWt6:              " Continue waiting while display sets up

    " Display
    DISP  = DTR & !A0;      " !A0 implies its R/W, so check DTR
    DRW   = !DTR & !A0;     " !A0 implies its R/W (0 otherwise), RW inverse of DTR
    DDIR  = DTR;            " Data to/from display depends on action
    DISPE = 1;              " Enable display data
    " Digital pot
    POT   = 0;              " Disable potentiometer
    POTUD = 0;              " Increment/decrement irrelevant

    SRDY = 0;               " SRDY not ready while displaying

         IF (RESET)         THEN Idle       "Reset, stop displaying.
    ELSE                         DispWt7;   "Continue waiting


STATE DispWt7:              " Continue waiting while display sets up

    " Display
    DISP  = DTR & !A0;      " !A0 implies its R/W, so check DTR
    DRW   = !DTR & !A0;     " !A0 implies its R/W (0 otherwise), RW inverse of DTR
    DDIR  = DTR;            " Data to/from display depends on action
    DISPE = 1;              " Enable display data
    " Digital pot
    POT   = 0;              " Disable potentiometer
    POTUD = 0;              " Increment/decrement irrelevant

    SRDY = 0;               " SRDY not ready while displaying

         IF (RESET)         THEN Idle       "Reset, stop displaying.
    ELSE                         DispWt8;   "Continue waiting


STATE DispWt8:              " Continue waiting while display sets up

    " Display
    DISP  = DTR & !A0;      " !A0 implies its R/W, so check DTR
    DRW   = !DTR & !A0;     " !A0 implies its R/W (0 otherwise), RW inverse of DTR
    DDIR  = DTR;            " Data to/from display depends on action
    DISPE = 1;              " Enable display data
    " Digital pot
    POT   = 0;              " Disable potentiometer
    POTUD = 0;              " Increment/decrement irrelevant

    SRDY = 0;               " SRDY not ready while displaying

         IF (RESET)         THEN Idle       "Reset, stop displaying.
    ELSE IF (!DTR)          THEN DispRd     "Need extra wait state on reads
    ELSE                         DispStop;  "Done


STATE DispRd:               " Extra wait state on read
    " Display
    DISP  = DTR & !A0;      " !A0 implies its R/W, so check DTR
    DRW   = !DTR & !A0;     " !A0 implies its R/W (0 otherwise), RW inverse of DTR
    DDIR  = DTR;            " Data to/from display depends on action
    DISPE = 1;              " Keep enable high to keep data valid
    " Digital pot
    POT   = 0;              " Disable potentiometer
    POTUD = 0;              " Increment/decrement irrelevant

    SRDY = 1;               " SRDY needs to go high so CPU can read data

         IF (RESET)         THEN Idle       "Reset, stop displaying.
    ELSE                         DispStop;  "After this clock, we are done



STATE DispStop:             " Continue waiting while display sets up

    " Display
    DISP  = DTR & !A0;      " !A0 implies its R/W, so check DTR
    DRW   = !DTR & !A0;     " !A0 implies its R/W (0 otherwise), RW inverse of DTR
    DDIR  = DTR;            " Data to/from display depends on action
    DISPE = 0;              " Enable must go low before other signals
    " Digital pot
    POT   = 0;              " Disable potentiometer
    POTUD = 0;              " Increment/decrement irrelevant

    SRDY = 1;               " SRDY needs to go high so CPU can read data

         IF (RESET)         THEN Idle       "Reset, stop displaying.
    ELSE IF (PCS5)          THEN DispStop   "Require PCS edge to start cycle
    ELSE                         Idle;      "After this clock, we are done


" Following states for digital potentiometer

STATE PotLoop:              " Loop that controls the potentiometer

    " Display
    DISP  = 0;              " Disable display RS
    DDIR  = 0;              " Direction irrelevant
    DRW   = 0;              " Read/Write irrelevant
    DISPE = 0;              " Display enable must deactivate before CS

    SRDY  = 0;              " SRDY ready now that we're done reading

    " Update counter to count iterations
    C5 = (!C5 & C4 & C3 & C2 & C1 & C0) # (C5 & !(C4 & C3 & C2 & C1 & C0));
    C4 = (!C4 & C3 & C2 & C1 & C0) # (C4 & !(C3 & C2 & C1 & C0));
    C3 = (!C3 & C2 & C1 & C0) # (C3 & !(C2 & C1 & C0));
    C2 = (!C2 & C1 & C0) # (C2 & !(C1 & C0));
    C1 = C1 $ C0;
    C0 = !C0;

         IF (RESET)                         THEN Idle    WITH { POT = 0; POTUD = 0 }     "Reset
    ELSE IF (C0 & C1 & C2 & C3 & C4 & C5)   THEN Idle    WITH { POT = 0; POTUD = 0 }     "Done 5us delay
    ELSE IF (!C0 & !C1 & !C2 & !POT)        THEN PotLoop WITH { POT = 1; POTUD = !A0 }   "Setup satisfied
    ELSE IF (!C0 & !C1 & !C2 & POT)         THEN PotLoop WITH { POT = 1; POTUD = A0 }    "Step pot
    ELSE                                         Idle    WITH { POT = 0; POTUD = 0 }     "Nothing to do



TEST_VECTORS
" Display
( [ Clock, RESET,  PCS5,  DTR,   A0 ] -> [  SRDY,  DISP,  DDIR,   DRW, DISPE ] )

" Writing to display RAM
  [   .C.,     1,     0,  .X.,  .X. ] -> [     1,     0,     0,     0,     0 ]; " reset
  [   .C.,     0,     1,    1,    0 ] -> [     0,     1,     1,     0,     1 ]; " start cycle
  [   .C.,     0,     1,    1,    0 ] -> [     0,     1,     1,     0,     1 ]; "   0ns: wait state 1
  [   .C.,     0,     1,    1,    0 ] -> [     0,     1,     1,     0,     1 ]; "  83ns: wait state 2
  [   .C.,     0,     1,    1,    0 ] -> [     0,     1,     1,     0,     1 ]; " 167ns: wait state 3
  [   .C.,     0,     1,    1,    0 ] -> [     0,     1,     1,     0,     1 ]; " 250ns: wait state 4
  [   .C.,     0,     1,    1,    0 ] -> [     0,     1,     1,     0,     1 ]; " 333ns: wait state 5
  [   .C.,     0,     1,    1,    0 ] -> [     0,     1,     1,     0,     1 ]; " 417ns: wait state 6
  [   .C.,     0,     1,    1,    0 ] -> [     0,     1,     1,     0,     1 ]; " 500ns: wait state 7
  [   .C.,     0,     1,    1,    0 ] -> [     0,     1,     1,     0,     1 ]; " 583ns: wait state 8
  [   .C.,     0,     1,    1,    0 ] -> [     1,     1,     1,     0,     0 ]; " SRDY high so CPU can finish write
  [   .C.,     0,     1,    1,    0 ] -> [     1,     1,     1,     0,     0 ]; " Stay in state until PCS goes inactive
  [   .C.,     0,     0,    1,    0 ] -> [     1,     0,     0,     0,     0 ]; " back to idle

" Write command
  [   .C.,     1,     0,  .X.,  .X. ] -> [     1,     0,     0,     0,     0 ]; " reset
  [   .C.,     0,     1,    1,    1 ] -> [     0,     0,     1,     0,     0 ]; " start cycle
  [   .C.,     0,     1,    0,    1 ] -> [     0,     0,     1,     0,     1 ]; "   0ns: wait state 1
  [   .C.,     0,     1,    1,    1 ] -> [     0,     0,     1,     0,     1 ]; "  83ns: wait state 2
  [   .C.,     0,     1,    1,    1 ] -> [     0,     0,     1,     0,     1 ]; " 167ns: wait state 3
  [   .C.,     0,     1,    1,    1 ] -> [     0,     0,     1,     0,     1 ]; " 250ns: wait state 4
  [   .C.,     0,     1,    1,    1 ] -> [     0,     0,     1,     0,     1 ]; " 333ns: wait state 5
  [   .C.,     0,     1,    1,    1 ] -> [     0,     0,     1,     0,     1 ]; " 417ns: wait state 6
  [   .C.,     0,     1,    1,    1 ] -> [     0,     0,     1,     0,     1 ]; " 500ns: wait state 7
  [   .C.,     0,     1,    1,    1 ] -> [     0,     0,     1,     0,     1 ]; " 583ns: wait state 8
  [   .C.,     0,     1,    1,    1 ] -> [     1,     0,     1,     0,     0 ]; " SRDY high so CPU can finish write
  [   .C.,     0,     0,    0,    0 ] -> [     1,     0,     0,     0,     0 ]; " back to idle

" Read busy flag
  [   .C.,     1,     0,  .X.,  .X. ] -> [     1,     0,     0,     0,     0 ]; " reset
  [   .C.,     0,     1,    1,    0 ] -> [     0,     0,     1,     0,     0 ]; " start cycle
  [   .C.,     0,     1,    0,    0 ] -> [     0,     0,     1,     1,     1 ]; "   0ns: wait state 1
  [   .C.,     0,     1,    1,    0 ] -> [     0,     0,     1,     1,     1 ]; "  83ns: wait state 2
  [   .C.,     0,     1,    1,    0 ] -> [     0,     0,     1,     1,     1 ]; " 167ns: wait state 3
  [   .C.,     0,     1,    1,    0 ] -> [     0,     0,     1,     1,     1 ]; " 250ns: wait state 4
  [   .C.,     0,     1,    1,    0 ] -> [     0,     0,     1,     1,     1 ]; " 333ns: wait state 5
  [   .C.,     0,     1,    1,    0 ] -> [     0,     0,     1,     1,     1 ]; " 417ns: wait state 6
  [   .C.,     0,     1,    1,    0 ] -> [     0,     0,     1,     1,     1 ]; " 500ns: wait state 7
  [   .C.,     0,     1,    1,    0 ] -> [     0,     0,     1,     1,     1 ]; " 583ns: wait state 8
  [   .C.,     0,     1,    1,    0 ] -> [     1,     0,     1,     1,     1 ]; " SRDY high so CPU can finish read
  [   .C.,     0,     1,    1,    0 ] -> [     1,     0,     1,     1,     0 ]; " enable disabled for display to finish
  [   .C.,     0,     0,    0,    0 ] -> [     1,     0,     0,     0,     0 ]; " back to idle



" Digital pot
( [ Clock, RESET, !PCS6,   A0 ] -> [  SRDY,   POT, POTUD ] )

" Increment
  [   .C.,     1,     0,  .X. ] -> [     1,     1,     0 ]; " Reset
  [   .C.,     0,     1,    1 ] -> [     0,     1,     0 ]; " Setup
  [   .C.,     0,     1,    1 ] -> [     0,     1,     0 ]; " Setup
  [   .C.,     0,     1,    1 ] -> [     0,     1,     0 ]; " Setup
  [   .C.,     0,     1,    1 ] -> [     0,     1,     0 ]; " Setup
  [   .C.,     0,     1,    1 ] -> [     0,     1,     0 ]; " Setup
  [   .C.,     0,     1,    1 ] -> [     0,     1,     0 ]; " Setup
  [   .C.,     0,     1,    1 ] -> [     0,     1,     0 ]; " Setup
  [   .C.,     0,     1,    1 ] -> [     0,     1,     0 ]; " Setup
  [   .C.,     0,     1,    1 ] -> [     0,     0,     0 ]; " Setup CS active
  [   .C.,     0,     1,    1 ] -> [     0,     0,     0 ]; " Setup CS active
  [   .C.,     0,     1,    1 ] -> [     0,     0,     0 ]; " Setup CS active
  [   .C.,     0,     1,    1 ] -> [     0,     0,     0 ]; " Setup CS active
  [   .C.,     0,     1,    1 ] -> [     0,     0,     0 ]; " Setup CS active
  [   .C.,     0,     1,    1 ] -> [     0,     0,     0 ]; " Setup CS active
  [   .C.,     0,     1,    1 ] -> [     0,     0,     0 ]; " Setup CS active
  [   .C.,     0,     1,    1 ] -> [     0,     0,     0 ]; " Setup CS active
  [   .C.,     0,     1,    1 ] -> [     0,     0,     1 ]; " Do increment
  [   .C.,     0,     1,    1 ] -> [     0,     0,     1 ]; " Do increment
  [   .C.,     0,     1,    1 ] -> [     0,     0,     1 ]; " Do increment
  [   .C.,     0,     1,    1 ] -> [     0,     0,     1 ]; " Do increment
  [   .C.,     0,     1,    1 ] -> [     0,     0,     1 ]; " Do increment
  [   .C.,     0,     1,    1 ] -> [     0,     0,     1 ]; " Do increment
  [   .C.,     0,     1,    1 ] -> [     0,     0,     1 ]; " Do increment
  [   .C.,     0,     1,    1 ] -> [     0,     0,     1 ]; " Do increment
  [   .C.,     0,     1,    1 ] -> [     0,     0,     1 ]; " Done
  [   .C.,     0,     1,    1 ] -> [     0,     0,     1 ]; " Done
  [   .C.,     0,     1,    1 ] -> [     0,     0,     1 ]; " Done
  [   .C.,     0,     1,    1 ] -> [     0,     0,     1 ]; " Done
  [   .C.,     0,     1,    1 ] -> [     0,     0,     1 ]; " Done
  [   .C.,     0,     1,    1 ] -> [     0,     0,     1 ]; " Done
  [   .C.,     0,     1,    1 ] -> [     0,     0,     1 ]; " Done
  [   .C.,     0,     1,    1 ] -> [     0,     0,     1 ]; " Done
  [   .C.,     0,     1,    1 ] -> [     0,     0,     1 ]; " Done
  [   .C.,     0,     1,    1 ] -> [     0,     0,     1 ]; " Done
  [   .C.,     0,     1,    1 ] -> [     0,     0,     1 ]; " Done
  [   .C.,     0,     1,    1 ] -> [     0,     0,     1 ]; " Done
  [   .C.,     0,     1,    1 ] -> [     0,     0,     1 ]; " Done
  [   .C.,     0,     1,    1 ] -> [     0,     0,     1 ]; " Done
  [   .C.,     0,     1,    1 ] -> [     0,     0,     1 ]; " Done
  [   .C.,     0,     1,    1 ] -> [     0,     0,     1 ]; " Done
  [   .C.,     0,     1,    1 ] -> [     0,     0,     1 ]; " Done
  [   .C.,     0,     1,    1 ] -> [     0,     0,     1 ]; " Done
  [   .C.,     0,     1,    1 ] -> [     0,     0,     1 ]; " Done
  [   .C.,     0,     1,    1 ] -> [     0,     0,     1 ]; " Done
  [   .C.,     0,     1,    1 ] -> [     0,     0,     1 ]; " Done
  [   .C.,     0,     1,    1 ] -> [     0,     0,     1 ]; " Done
  [   .C.,     0,     1,    1 ] -> [     0,     0,     1 ]; " Done
  [   .C.,     0,     1,    1 ] -> [     0,     0,     1 ]; " Done
  [   .C.,     0,     1,    1 ] -> [     0,     0,     1 ]; " Done
  [   .C.,     0,     1,    1 ] -> [     0,     0,     1 ]; " Done
  [   .C.,     0,     1,    1 ] -> [     0,     0,     1 ]; " Done
  [   .C.,     0,     1,    1 ] -> [     0,     0,     1 ]; " Done
  [   .C.,     0,     1,    1 ] -> [     0,     0,     1 ]; " Done
  [   .C.,     0,     1,    1 ] -> [     0,     0,     1 ]; " Done
  [   .C.,     0,     1,    1 ] -> [     0,     0,     1 ]; " Done
  [   .C.,     0,     1,    1 ] -> [     0,     0,     1 ]; " Done
  [   .C.,     0,     1,    1 ] -> [     1,     0,     0 ]; " Back to idle

" Decrement
  [   .C.,     1,     0,  .X. ] -> [     1,     1,     0 ]; " Reset
  [   .C.,     0,     1,    1 ] -> [     0,     1,     1 ]; " Setup
  [   .C.,     0,     1,    1 ] -> [     0,     1,     1 ]; " Setup
  [   .C.,     0,     1,    1 ] -> [     0,     1,     1 ]; " Setup
  [   .C.,     0,     1,    1 ] -> [     0,     1,     1 ]; " Setup
  [   .C.,     0,     1,    1 ] -> [     0,     1,     1 ]; " Setup
  [   .C.,     0,     1,    1 ] -> [     0,     1,     1 ]; " Setup
  [   .C.,     0,     1,    1 ] -> [     0,     1,     1 ]; " Setup
  [   .C.,     0,     1,    1 ] -> [     0,     1,     1 ]; " Setup
  [   .C.,     0,     1,    1 ] -> [     0,     0,     1 ]; " Setup CS active
  [   .C.,     0,     1,    1 ] -> [     0,     0,     1 ]; " Setup CS active
  [   .C.,     0,     1,    1 ] -> [     0,     0,     1 ]; " Setup CS active
  [   .C.,     0,     1,    1 ] -> [     0,     0,     1 ]; " Setup CS active
  [   .C.,     0,     1,    1 ] -> [     0,     0,     1 ]; " Setup CS active
  [   .C.,     0,     1,    1 ] -> [     0,     0,     1 ]; " Setup CS active
  [   .C.,     0,     1,    1 ] -> [     0,     0,     1 ]; " Setup CS active
  [   .C.,     0,     1,    1 ] -> [     0,     0,     1 ]; " Setup CS active
  [   .C.,     0,     1,    1 ] -> [     0,     0,     0 ]; " Do decrement
  [   .C.,     0,     1,    1 ] -> [     0,     0,     0 ]; " Do decrement
  [   .C.,     0,     1,    1 ] -> [     0,     0,     0 ]; " Do decrement
  [   .C.,     0,     1,    1 ] -> [     0,     0,     0 ]; " Do decrement
  [   .C.,     0,     1,    1 ] -> [     0,     0,     0 ]; " Do decrement
  [   .C.,     0,     1,    1 ] -> [     0,     0,     0 ]; " Do decrement
  [   .C.,     0,     1,    1 ] -> [     0,     0,     0 ]; " Do decrement
  [   .C.,     0,     1,    1 ] -> [     0,     0,     0 ]; " Do decrement
  [   .C.,     0,     1,    1 ] -> [     0,     0,     0 ]; " Done
  [   .C.,     0,     1,    1 ] -> [     0,     0,     0 ]; " Done
  [   .C.,     0,     1,    1 ] -> [     0,     0,     0 ]; " Done
  [   .C.,     0,     1,    1 ] -> [     0,     0,     0 ]; " Done
  [   .C.,     0,     1,    1 ] -> [     0,     0,     0 ]; " Done
  [   .C.,     0,     1,    1 ] -> [     0,     0,     0 ]; " Done
  [   .C.,     0,     1,    1 ] -> [     0,     0,     0 ]; " Done
  [   .C.,     0,     1,    1 ] -> [     0,     0,     0 ]; " Done
  [   .C.,     0,     1,    1 ] -> [     0,     0,     0 ]; " Done
  [   .C.,     0,     1,    1 ] -> [     0,     0,     0 ]; " Done
  [   .C.,     0,     1,    1 ] -> [     0,     0,     0 ]; " Done
  [   .C.,     0,     1,    1 ] -> [     0,     0,     0 ]; " Done
  [   .C.,     0,     1,    1 ] -> [     0,     0,     0 ]; " Done
  [   .C.,     0,     1,    1 ] -> [     0,     0,     0 ]; " Done
  [   .C.,     0,     1,    1 ] -> [     0,     0,     0 ]; " Done
  [   .C.,     0,     1,    1 ] -> [     0,     0,     0 ]; " Done
  [   .C.,     0,     1,    1 ] -> [     0,     0,     0 ]; " Done
  [   .C.,     0,     1,    1 ] -> [     0,     0,     0 ]; " Done
  [   .C.,     0,     1,    1 ] -> [     0,     0,     0 ]; " Done
  [   .C.,     0,     1,    1 ] -> [     0,     0,     0 ]; " Done
  [   .C.,     0,     1,    1 ] -> [     0,     0,     0 ]; " Done
  [   .C.,     0,     1,    1 ] -> [     0,     0,     0 ]; " Done
  [   .C.,     0,     1,    1 ] -> [     0,     0,     0 ]; " Done
  [   .C.,     0,     1,    1 ] -> [     0,     0,     0 ]; " Done
  [   .C.,     0,     1,    1 ] -> [     0,     0,     0 ]; " Done
  [   .C.,     0,     1,    1 ] -> [     0,     0,     0 ]; " Done
  [   .C.,     0,     1,    1 ] -> [     0,     0,     0 ]; " Done
  [   .C.,     0,     1,    1 ] -> [     0,     0,     0 ]; " Done
  [   .C.,     0,     1,    1 ] -> [     0,     0,     0 ]; " Done
  [   .C.,     0,     1,    1 ] -> [     0,     0,     0 ]; " Done
  [   .C.,     0,     1,    1 ] -> [     0,     0,     0 ]; " Done
  [   .C.,     0,     1,    1 ] -> [     0,     0,     0 ]; " Done
  [   .C.,     0,     1,    1 ] -> [     1,     0,     0 ]; " Back to idle

END
